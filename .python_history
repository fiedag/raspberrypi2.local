import piplates.RELAYplate as RELAY
import RPi.
import piplates.RELAYplate as RELAY
RELAY.getID(0)
RELAY.relayON(0,3)
RELAY.relayOFF(0,3)
RELAY.relayON(0,3)
RELAY.relayOFF(0,3)
from datetime import time
print time
print(time)
print(datetime)
print(datetime.now())
from datetime import datetime
print(datetime.now())
st = datetime.now()
fin = dtetime.now()
fin = datetime.now()
print (fin - st)
from datetime import time
t1 = datetime.now()
st = datetime.now()
from datetime import datetime
st = datetime.now()
fin = datetime.now()
msg = "Time diff {:}"
print(msg.format(fin - st))
diff = (fin - st).strftime("%S")
from crontab import Crontab
from crontab import crontab
from Crontab import crontab
from crontab import Crontab
exit
with Crontab as cron:
	job = cron.new(command = 'echo hello world')
	job.minute.every(1)
print('cron was just executed')
with Crontab as cron:
	job = cron.new(command = 'echo hello world')
	job.minute.every(1)
print('cron.write() was just executed')
from crontab import Crontab
from apscheduler.scheduler import Scheduler
from crontab import Crontab
from crontab import crontab
from crontab import Crontab
from __future__ import print_function
import datetime
import pickle
import os.path
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
import os
import os.path
from os import path
path.exists('/tmp/ranyesterday')
from pathlib import Path
Path('/tmp/ranyesterday').touch()
path.exists('/tmp/ranyesterday')
Path('/tmp/ranyesterday').delete()
import sys
print(sys.path)
os._doc_
os.__doc__
print(os.__doc__)
print(pathlib.__doc__)
print(Path.__doc__)
Path('/tmp/ranyesterday').touch()
path.exists('/tmp/ranyesterday')
os.path.exists('/tmp/ranyesterday')
from os import path
path.exists('/tmp/ranyesterday')
from os import rm
from os import *
path.exists('/tmp/ranyesterday')
getpid()
remove('/tmp/ranyesterday')
path.exists('/tmp/ranyesterday')
touch('
touch('/tmp/ranyesterday')
open('/tmp/ranyesterday', 'r')
open('/tmp/ranyesterday', O_RDONLY)
open('/tmp/ranyesterday', O_WRITE)
open('/tmp/ranyesterday', 'w')
open('/tmp/ranyesterday', O_WRONLY )
open('/tmp/ranyesterday', O_CREAT)
open('/tmp/sprinklers.py.ranyesterday', O_WRONLY )
open('/tmp/sprinklers.py.ranyesterday', O_CREAT )
from pathlib import Path
with open('/tmp/test.py.skip', 'rw') as myfile:
	data=myfile.readlines()
print(data)
	print(data)
print("hello")
print(data)
with open('/tmp/test.py.skip', 'rw') as myfile:
data=myfile.readlines()
with open('/tmp/test.py.skip', 'rw') as myfile:
	str=myfile.readlines()
	print("string {}".format(str))
with open('/tmp/test.py.skip', 'r') as myfile:
	str=myfile.readlines()
	print("string {}".format(str))
from pathlib import Path
txt = Path('/tmp/test.py.skip').read_text()
print(txt)
exit
import skipper.py
import skipper
run_this_time(1)
skipper.run_this_time(1)
from skipper import run_this_time
run_this_time(1)
exit
import paho.mqtt.client as mqtt
mqttc = mqtt.Client()
mqttc.reinitialize()
mqttc.reinitialise()
mqttc.connect("mqtt.eclipse.org", 1883, 60)
mqttc.connect("mqtt.eclipseprojects.io", 1883, 60)
mqttc.subscribe("/house/sprinklers")
def on_message(client, userdata, message):
    print("message received " ,str(message.payload.decode("utf-8")))
    print("message topic=",message.topic)
    print("message qos=",message.qos)
    print("message retain flag=",message.retain)
mqttc.on_message=on_message
mqttc.connect("mqtt.eclipseprojects.io", 1883, 60)
mqttc.connect("broker.hivemq.com", 1883, 60)
mqttc.connect("broker.mqttdashboard.com", 1883, 60)
import piplates.RELAYplate as RELAY
print(RELAY.__doc__)
dir(RELAY)
RELAY.relaySTATE()
RELAY.relaySTATE(0)
bin(2)
bin(127)
str(bin(127))
int(bin(127))
str(bin(127))
str(bin(127),2,4)
substr(bin(127),2,4)
"{0:b}".format(127)
binary = lambda n: '' if n==0 else binary(n/2) + str(n%2)
binary(4)
binary 5
fact = lambda n: 1 if n==1 else n * fact(n-1)
fact(3)
fact(4)
fact(5)
fact(6)
fact(7)
fact(40)
fact(41)
fact(43)
fact(44)
fact(48)
fact(50)
fact(100)
fact(1000)
fact(200)
fact(300)
fact(400)
fact(500)
f'arg 1 {arg1} arg 2 {arg2}'
arg1="argument1"
arg2="argument2"
f'arg 1 {arg1} arg 2 {arg2}'
"{0:b}".format(127)
binary(4)
bin(4)
bin(4)>>1
bin(4>>1)
bin(127)
bin(127 | 64)
bin(127 & 64)
127 & 64
127 & 32
bin(66)
66 & 64
66 & 32
2^^7
2^7
2^8
2^9
2^6
2^5
2^4
2^3
2^2
2^1
fn = lambda n bits: 0 if n & 2**bits = 0 else fn(n,bits>1)
2**7
fn = lambda n,bits: 0 if n & 2**(bits-1) = 0 else fn(n,bits-1)
fn = lambda n,bits: 0 if n & 2**(bits-1)=0 else fn(n,bits-1)
fn = lambda n,bits: 1 if n & 2**(bits-1)==0 else fn(n,bits-1)
fn(2,5)
0b100
0b100 & 4
0b100 & 2
64 / 2
0b1111111
0b1111111 & (64)
0b1111111 & (64/2)
0b1111111 & int(64/2)
0b1011111 & int(64/2)
0b1010101 & int(64/2)
0b1010101 & int(32/2)
0b1010101 & int(64)
(0b1010101 & int(64)) ==0
f = lambda x: 1 if x in (1,2) else f(x-1)+f(x-2)
f(30)
f(40)
f(30)
f(31)
f(32)
f(35)
def states :
def states(n) :
def states(n,relay):
def states(n,first,last):
	print("relay {} is on? {}".format(first, n & 2**first)
states(127,1,7)
def states(n,first,last):
	print("relay {} is on? {}".format(first, n & 2**first))
states(127,1,7)
def states(n,first,last):
	print("relay {} is on? {}".format(first, (n & 2**first)!=0))
states(127,1,7)
states(126,1,7)
bin(126)
2**1
126 & 2
def states(n,first,last):
	print("relay {} is on? {}".format(first, (n & 2**(first-1))!=0))
states(126,1,7)
states(127,1,7)
states(1,1,7)
states(2,1,7)
states(3,1,7)
states(4,1,7)
states(5,1,7)
def states(n,first,last):
	if first==0:
		return
def stateof(n,relay):
	if relay==0:
		return
	print("{}={}".format(relay, (n & 2**(relay-1))!=0) + " " + stateof(n,relay-1))
stateof(127,7)
def stateof(n,relay):
	if relay==0:
		return
	print("{}={}".format(relay, (n & 2**(relay-1))!=0) + " " + str(stateof(n,relay-1)))
stateof(127,7)
stateof(126,7)
stateof(125,7)
stateof(124,7)
def stateof(n,relay):
	if relay==0:
		return
	return "{}={}".format(relay, (n & 2**(relay-1))!=0) + " " + str(stateof(n,relay-1)))
def stateof(n,relay):
	if relay==0:
		return
	return "{}={}".format(relay, (n & 2**(relay-1))!=0) + " " + str(stateof(n,relay-1))
stateof(124,7)
def stateof(n,relay):
	if relay==0:
		return ""
	return "{}={}".format(relay, (if (n & 2**(relay-1))!=0): "ON") + " " + str(stateof(n,relay-1))
"hello"
str("hello")
str(str("hello"))
if True: print("ok")
